
	работа с linux-консолью
pwd - показывает полный путь
dir - показывает список текущих папок и документов
ls - список каталогов и файлов(-l - выводит полную инфу)

cat - показывает содержимое файла
nano - зайти и изменить файл
less - нормально выводит содержимое файла (q - выйти)
head -n file.cpp - выводит первые n строк
tail -n file.cpp -  выводит последние n строк
echo "hi">>file2 - добавить в file2 надпись
sh file.sh - запустить shell 


cd(change dirictorial) - переход в нужную папку
cd /d/papka - переход по указонному пути 	
mkdir new-git-project - создает новую папку
rmdir - удаляет каталог
rm -rf dir - для удаления каталога со всеми внутренностями 
touch new_file - создать новый файл
rm file - удаляет файл из папки
git mv name1 name2 - переименовывание фай
mv pap1/file pap2/file - перемещает в другую папку
cp file1 file2 - копировать файл (если нет такого, создается новый)
cp pap1/file.cpp pap2/file.cpp - копировать файл в другую папку
chmode - изменяет право доступа
chmode ugo+rwx file.cpp (u - владелец файла, g - группа файла, o - остальные;  r - чтение, w - запись, x - выполнение)



Джокерные символы
*а/a*/*a* - название файла, заканчивающегося/начинающегося/содержащего а
? - замена одной буквы

grep Vlad file.cpp - выводит строки с подстрокой vlad из файла file.cpp
gerp Vlad root/* - найти все строки со всех файлов с папки root с построкой Vlad
(-v - инверсионный поиск, -i - не учитывать регистр)
grep Vlad file1.txt |less - то есть полученный результат мы передаем в новую команду


	Работа с репозиторием
git init - инициализирование репозитория
git status - узнать статус программы
git add name_file - добавление в индекс проекта( пишется без круглых скобок, как и везде)
git reset name_file - удаление файла из контекста (в add который)
git reset - для удаления всех файлов из контекста 
git commit -m "fdsv" - коммитированние файла (т.е. "заливаем" добавленные файлы в локальный проект) 
git log - отображает все cоmmit-ы, чтобы выйти, нажать "q"
git log --pretty=oneline - удобный вывод логов 
git clone (Вставка ссылки, которая копируется и добавляется с готовой командойй с удаленного хранилища)
git config - настройки 
git config -I - инфа о текущих настройках
git diff - просмотреть изменение файла сравнивая с последним коммитом
git diff id_commit_1 id_commit_2 - сравнить два коммита
git checkout file.cpp - убрать файл из контеста (т.е. вернуть последнюю версию файла до изменения и до коммита (который не был добавлен в add))
git checkout . - убрать все файлы из контекста
git checkout f32rfwgeg235g - берет сохранение данного коммита
git reset --soft HEAD^1 - выкидывает файл из коммита в индекс
git reset --hard HEAD^1 - удаление файлов из коммита полностью (файл принимает изначальную версию)
git rm name_file - удаляет ото всюду (даже из коммита)
gitk - просмотр истории коммитов в граф интерфейсе




	ветки
git branch - узнать ветку, на кторой находишься
git branch ИМЯ - создать новую ветку
git checkout -b ИМЯ - создает и сразу же переключается на ветку
git branch -D ИМЯ - удаляет ветку и предупреждает, ести ьа не была смерджена с другой
git branch -d ИМЯ - удалить ветку
git branch -M ИМЯ - переименовывает ветку
git checkout ИМЯ - переключиться на другую ветку
git merge ИМЯ - объединяет данную ветку с указанной
git status --short | grep "UU" - показывает, в каком файле ошибка
git merge --abort - чтобы отменить измененный merge
git rebase - перебазирует ветку на нужную (т.e. переносит всю ветку на нужную(там, где стоит head))
git rebase --continue - продолжение после утилизации конфликта в файле 
git rebase --skip - пропуститьт данную ошибку
git rebase --abort - отменить ребазирование 
git reflog <name> -1 - получить указатель на ведку до ребазирования 
git clone <dir1><dir2> - копирует из одной папки в другую

	
	удаленный сервер или хранилище
git config --global user.name - показывает имя пользователя
git config --global user.name "Name" - изменяет имя пользователя на ...
git config --global user.email "Name"- изменяет почтовый ящик
git remote add origin - добавить удаленный репозиторий (из сети)
git remote show origin - узнать, на какой удаленный репозиторий настроен локальный
git push -u origin master- залить ветвь на сервер
git push - залив (короткая функция)
git pull origin branch - залить изменения с удаленного репозитория на ветку branch
git pull - загрузить изменения с удаленного репозитория срразу в свое
git fetch - связывается с удалённым репозиторием и забирает из него все изменения, которых у вас пока нет и сохраняет их локально. (git checkout -b "new_branch" - чтобы потом перенемти все на НОВУЮ ветвь)
git push origin --delete new3 - удаляет ветку new3 из удаленного репозитория
git remote -v  - узнать, к каким удаленным репозеториям подключено
git remote rm testing - чтобы удалить удаленное именованное testing (где testing - наименование удаленного репозетория (обычно заменяется на origin))
